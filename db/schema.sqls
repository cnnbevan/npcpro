-- Database schema for NPC narrative project
-- Requires pgcrypto and pgvector extensions

CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS vector;

/* ------------------------------------------------------------
 * Enumerated types
 * ------------------------------------------------------------ */
CREATE TYPE reference_type AS ENUM ('plot_point', 'background', 'trivia', 'marketing');
CREATE TYPE note_type AS ENUM ('persona', 'relationship', 'backstory', 'speech_pattern', 'other');
CREATE TYPE chunk_type AS ENUM ('synopsis', 'scene', 'dialogue', 'character_note');
CREATE TYPE request_status AS ENUM ('queued', 'running', 'succeeded', 'failed', 'cancelled');

/* ------------------------------------------------------------
 * Movies catalog
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS movies (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    title              text NOT NULL,
    original_title     text,
    release_year       smallint,
    language           text,
    runtime_minutes    smallint,
    genres             jsonb DEFAULT '[]'::jsonb,
    poster_url         text,
    synopsis           text,
    created_at         timestamptz NOT NULL DEFAULT now(),
    updated_at         timestamptz NOT NULL DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS movies_title_unique_idx
    ON movies (lower(title));

/* ------------------------------------------------------------
 * Film characters
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS characters (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    name               text NOT NULL,
    aliases            jsonb DEFAULT '[]'::jsonb,
    actor_name         text,
    description        text,
    traits             jsonb DEFAULT '{}'::jsonb,
    is_primary         boolean NOT NULL DEFAULT false,
    created_at         timestamptz NOT NULL DEFAULT now(),
    updated_at         timestamptz NOT NULL DEFAULT now(),
    created_by         text,
    updated_by         text
);

CREATE UNIQUE INDEX IF NOT EXISTS characters_movie_name_uq
    ON characters (movie_id, lower(name));

/* ------------------------------------------------------------
 * Scene segmentation
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS scenes (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    scene_number       integer NOT NULL,
    start_ms           integer,
    end_ms             integer,
    summary            text,
    location           text,
    chapter            text,
    created_at         timestamptz NOT NULL DEFAULT now(),
    updated_at         timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS scenes_movie_scene_idx
    ON scenes (movie_id, scene_number);

/* ------------------------------------------------------------
 * Subtitle segments
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS subtitle_segments (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    scene_id           uuid REFERENCES scenes(id) ON DELETE SET NULL,
    character_id       uuid REFERENCES characters(id) ON DELETE SET NULL,
    start_ms           integer NOT NULL,
    end_ms             integer NOT NULL,
    speaker            text,
    text               text NOT NULL,
    confidence         real,
    source             text,
    created_at         timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS subtitle_segments_movie_time_idx
    ON subtitle_segments (movie_id, start_ms);

CREATE INDEX IF NOT EXISTS subtitle_segments_text_fts_idx
    ON subtitle_segments
    USING gin (to_tsvector('simple', text));

/* ------------------------------------------------------------
 * Movie references
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS movie_references (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    type               reference_type NOT NULL,
    title              text,
    content            text NOT NULL,
    source_url         text,
    created_at         timestamptz NOT NULL DEFAULT now(),
    created_by         text
);

/* ------------------------------------------------------------
 * Character notes
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS character_notes (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    character_id       uuid NOT NULL REFERENCES characters(id) ON DELETE CASCADE,
    note_type          note_type NOT NULL,
    content            text NOT NULL,
    source             text,
    created_at         timestamptz NOT NULL DEFAULT now(),
    created_by         text
);

/* ------------------------------------------------------------
 * Narrative request audit
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS narrative_requests (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id            uuid,
    movie_id           uuid REFERENCES movies(id) ON DELETE SET NULL,
    character_id       uuid REFERENCES characters(id) ON DELETE SET NULL,
    request_payload    jsonb NOT NULL,
    status             request_status NOT NULL DEFAULT 'queued',
    started_at         timestamptz,
    completed_at       timestamptz,
    result_token_usage integer,
    cache_hit          boolean NOT NULL DEFAULT false,
    created_at         timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS narrative_requests_lookup_idx
    ON narrative_requests (created_at DESC);

/* ------------------------------------------------------------
 * Narrative outputs
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS narrative_outputs (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    request_id         uuid NOT NULL REFERENCES narrative_requests(id) ON DELETE CASCADE,
    model_name         text NOT NULL,
    prompt_version     text,
    story_markdown     text NOT NULL,
    timeline_json      jsonb,
    quality_score      smallint,
    created_at         timestamptz NOT NULL DEFAULT now()
);

/* ------------------------------------------------------------
 * Prompt chunks cache
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS prompt_chunks (
    id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    chunk_type         chunk_type NOT NULL,
    chunk_order        integer,
    content            text NOT NULL,
    source_ids         jsonb DEFAULT '[]'::jsonb,
    created_at         timestamptz NOT NULL DEFAULT now(),
    updated_at         timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS prompt_chunks_movie_type_idx
    ON prompt_chunks (movie_id, chunk_type, chunk_order);

/* ------------------------------------------------------------
 * Subtitle embeddings (requires pgvector)
 * ------------------------------------------------------------ */
CREATE TABLE IF NOT EXISTS subtitle_embeddings (
    segment_id         uuid PRIMARY KEY REFERENCES subtitle_segments(id) ON DELETE CASCADE,
    movie_id           uuid NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
    embedding          vector(1536),
    created_at         timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS subtitle_embeddings_movie_idx
    ON subtitle_embeddings (movie_id);

/* ------------------------------------------------------------
 * Materialized view for character dialogue
 * ------------------------------------------------------------ */
CREATE MATERIALIZED VIEW IF NOT EXISTS character_dialogue_view AS
SELECT
    ss.id          AS segment_id,
    ss.movie_id,
    ss.character_id,
    c.name         AS character_name,
    ss.start_ms,
    ss.end_ms,
    ss.text
FROM subtitle_segments ss
LEFT JOIN characters c ON c.id = ss.character_id;

CREATE INDEX IF NOT EXISTS character_dialogue_view_lookup_idx
    ON character_dialogue_view (character_id, start_ms);
